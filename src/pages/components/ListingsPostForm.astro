---
// src/components/BlogPostForm.astro
// Este componente se encarga de renderizar el formulario
// y de manejar la lógica de envío al servidor (API Routes de Astro).

// Props:
// - postId: String, opcional. Si se proporciona, significa que estamos en modo edición
//           y se intentarán cargar los datos del post con ese ID.
const { postId } = Astro.props;

// Variable para almacenar los datos del post si estamos en modo edición.
// Se inicializa a null y se llenará si postId existe y la API devuelve datos.
let postToEdit = null;

// Si postId existe, intentamos cargar los datos del post para la edición.
// Esta parte se ejecuta en el servidor (durante la compilación o en una SSR Function)
// cuando la página que usa este componente es renderizada.
if (postId) {
  try {
    // Aquí NO usamos el Admin SDK directamente. Llamamos a nuestra propia API Route de Astro.
    // Astro hace el fetch desde el servidor (build time o server-side rendering).
    // NOTA: Para este fetch inicial, no se necesita token de auth porque la API GET /api/blog/[id]
    // debería permitir lectura para cualquier usuario autenticado (con la lógica de auth-middleware).
    // Si tu GET también requiere tu UID específico, entonces este fetch inicial fallará
    // si no hay forma de pasar el token aquí. Para un CMS, a menudo el GET es más permisivo
    // o se maneja la redirección al login si no hay sesión.
    const response = await fetch(`${Astro.url.origin}/api/blog/${postId}`);
    if (response.ok) {
      postToEdit = await response.json();
    } else {
      console.error(`[BlogPostForm.astro] Error al cargar post ${postId} para edición:`, await response.json());
      // Si hay un error al cargar, postToEdit seguirá siendo null, y el formulario estará vacío.
    }
  } catch (error) {
    console.error(`[BlogPostForm.astro] Error de red al cargar post ${postId}:`, error);
  }
}
---

<form id="post-form" data-post-id={postId}>
  <h2>{postId ? 'Editar Post' : 'Crear Nuevo Post'}</h2>

  <label>
    Título (ES):
    <input type="text" name="title_es" value={postToEdit?.translations?.es?.title || ''} required />
  </label>
  <label>
    Contenido (ES):
    <textarea name="content_es" rows="10" required>{postToEdit?.translations?.es?.content || ''}</textarea>
  </label>
  <label>
    Resumen (ES):
    <textarea name="content_en" rows="10">{postToEdit?.translations?.es?.excerpt || ''}</textarea>
  </label>

  <label>
    Título (EN):
    <input type="text" name="title_en" value={postToEdit?.translations?.en?.title || ''} />
  </label>
  <label>
    Contenido (EN):
    <textarea name="content_en" rows="10">{postToEdit?.translations?.en?.content || ''}</textarea>
  </label>
  <label>
    Resumen (EN):
    <textarea name="content_en" rows="10">{postToEdit?.translations?.en?.excerpt || ''}</textarea>
  </label>

  <label>
    Categorías (separadas por comas):
    <input type="text" name="categories" value={postToEdit?.categories?.join(',') || ''} />
  </label>

  <label>
    Imagen de Portada:
    <input type="file" name="coverImageFile" id="coverImageFileInput" />
    {postToEdit?.coverImage && typeof postToEdit.coverImage === 'string' && (
        <>
            <p>Imagen actual:</p>
            <img src={postToEdit.coverImage} alt="Portada actual" style="max-width: 150px; margin-top: 10px;" />
            <label style="display: block; margin-top: 10px;">
                <input type="checkbox" name="coverImage_clear_flag" value="true" /> Eliminar imagen actual
            </label>
        </>
    )}
  </label>

  <label>
    Fecha de Publicación:
    <input type="date" name="pubDate"
           value={postToEdit?.pubDate ? new Date(postToEdit.pubDate).toISOString().split('T')[0] : new Date().toISOString().split('T')[0]} />
  </label>

  <label>
    <input type="checkbox" name="draft" checked={postToEdit?.draft ?? false} /> Borrador
  </label>

  <button type="submit">{postId ? 'Actualizar Post' : 'Crear Post'}</button>
</form>

<script type="module">
  // Este script se ejecuta en el cliente (navegador).
  // Se usa la directiva client:load o client:idle en el componente padre si se necesita.
  // Aquí no importamos directamente el SDK de Firebase Admin, solo el SDK de cliente para la autenticación.
  import { auth } from '/src/lib/firebase-config-client.js'; // Importamos la instancia de autenticación del cliente

  const form = document.getElementById('post-form');
  const postId = form.dataset.postId; // Obtener el ID del post si estamos en modo edición

  form.addEventListener('submit', async (e) => {
    e.preventDefault(); // Prevenir el envío de formulario por defecto

    const user = auth.currentUser;
    if (!user) {
      alert('Debes iniciar sesión para realizar esta operación.');
      // Opcional: Redirigir al usuario a la página de login si no está autenticado
      window.location.href = '/admin/login';
      return;
    }

    const idToken = await user.getIdToken(); // Obtener el token de ID del usuario autenticado

    const formData = new FormData(form); // Recolectar todos los datos del formulario, incluyendo el archivo de imagen

    // Determinar el método HTTP (PUT para actualizar, POST para crear) y la URL de la API
    const method = postId ? 'PUT' : 'POST';
    const url = postId ? `/api/blog/${postId}` : '/api/blog';

    try {
      const response = await fetch(url, {
        method: method,
        body: formData, // FormData se envía directamente y establece el Content-Type correcto (multipart/form-data)
        headers: {
          'Authorization': `Bearer ${idToken}`, // Añadir el encabezado de autorización con el token
        },
      });

      const result = await response.json(); // Leer la respuesta JSON del servidor

      if (response.ok) {
        alert('Operación exitosa!');
        // Opcional: Recargar la página o redirigir a la lista de posts
        window.location.href = '/admin/posts'; // Redirigir a la lista de posts
      } else {
        alert('Error en la operación: ' + result.error);
        console.error('Error del servidor:', result.error);
      }
    } catch (error) {
      console.error("Error al enviar el formulario (error de red o desconocido):", error);
      alert('Error de red o desconocido: ' + error.message);
    }
  });
</script>

<style>
  /* Estilos básicos para el formulario */
  form {
    max-width: 800px;
    margin: 20px auto;
    padding: 30px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  }
  h2 {
    text-align: center;
    margin-bottom: 25px;
    color: #333;
  }
  label {
    display: block;
    margin-bottom: 15px;
    font-weight: bold;
    color: #555;
  }
  input[type="text"],
  input[type="date"],
  textarea {
    width: calc(100% - 22px);
    padding: 10px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 16px;
    box-sizing: border-box; /* Incluye padding y border en el width */
  }
  input[type="file"] {
    margin-top: 5px;
  }
  input[type="checkbox"] {
    margin-right: 10px;
  }
  button[type="submit"] {
    display: block;
    width: 100%;
    padding: 12px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    font-size: 18px;
    cursor: pointer;
    margin-top: 25px;
  }
  button[type="submit"]:hover {
    background-color: #0056b3;
  }
  img {
    display: block;
    margin-top: 10px;
    border: 1px solid #eee;
    border-radius: 4px;
  }
</style>