---
// src/components/ListingsPostForm.astro

// 1. Recibimos la configuración y el ID como props.
// Se elimina el fetch que se ejecutaba en el servidor.
const { postId, firebaseConfig } = Astro.props;
---

<form id="post-form" data-post-id={postId}>
  <h2>{postId ? "Editar Listing" : "Crear Nuevo Listing"}</h2>

  <h3>Traducciones (Español)</h3>
  <label>
    Título (ES):
    <input type="text" name="title_es" required />
  </label>
  <label>
    Contenido (ES):
    <textarea name="content_es" rows="10" required></textarea>
  </label>
  <label>
    Resumen (ES):
    <textarea name="excerpt_es" rows="3"></textarea>
  </label>

  <h3>Traducciones (Inglés)</h3>
  <label>
    Título (EN):
    <input type="text" name="title_en" />
  </label>
  <label>
    Contenido (EN):
    <textarea name="content_en" rows="10"></textarea>
  </label>
  <label>
    Resumen (EN):
    <textarea name="excerpt_en" rows="3"></textarea>
  </label>

  <label>
    Categorías (separadas por comas):
    <input type="text" name="categories" />
  </label>

  <label>
    Imagen de Portada:
    <input type="file" name="coverImageFile" id="coverImageFileInput" />
    <div id="current-cover-image-display-area"></div>
    <label
      id="clear-image-option"
      style="display: block; margin-top: 10px; display: none;"
    >
      <input type="checkbox" name="coverImage_clear_flag" value="true" />
      Eliminar imagen actual
    </label>
  </label>

  <label>
    Fecha de Publicación:
    <input type="date" name="pubDate" />
  </label>

  <label>
    <input type="checkbox" name="draft" checked={postToEdit?.draft} /> Es Borrador
  </label>

  <button type="submit"
    >{postId ? "Actualizar Listing" : "Crear Listing"}</button
  >
</form>

<script type="module" define:vars={{ firebaseConfig }}>
  // 3. Inicializamos Firebase aquí, igual que en los otros componentes
  import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
  import {
    getAuth,
    onAuthStateChanged,
  } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";

  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);

  const form = document.getElementById("post-form");
  const currentPostId = form.dataset.postId;

  // --- Lógica para cargar y rellenar datos si estamos editando ---
  async function loadPostDataForEdit(id, token) {
    try {
      // NOTA: Asegúrate que la ruta a tu API sea la correcta para "listings"
      const response = await fetch(`/api/listings/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      const data = await response.json();
      if (response.ok) {
        populateForm(data);
      } else {
        alert(`Error al cargar el listing para editar: ${data.error}`);
      }
    } catch (error) {
      alert(`Error de red al cargar el listing: ${error.message}`);
    }
  }

  function populateForm(data) {
    if (!data) return;
    form.querySelector('[name="title_es"]').value =
      data.translations?.es?.title || "";
    form.querySelector('[name="content_es"]').value =
      data.translations?.es?.content || "";
    form.querySelector('[name="excerpt_es"]').value =
      data.translations?.es?.excerpt || "";
    form.querySelector('[name="title_en"]').value =
      data.translations?.en?.title || "";
    form.querySelector('[name="content_en"]').value =
      data.translations?.en?.content || "";
    form.querySelector('[name="excerpt_en"]').value =
      data.translations?.en?.excerpt || "";
    form.querySelector('[name="categories"]').value =
      data.categories?.join(",") || "";

    const pubDate =
      data.pubDate && data.pubDate.seconds
        ? new Date(data.pubDate.seconds * 1000)
        : new Date(data.pubDate);
    form.querySelector('[name="pubDate"]').value = pubDate
      .toISOString()
      .split("T")[0];

    form.querySelector('[name="draft"]').checked = data.draft || false;

    // Lógica para mostrar imagen actual
    const imageDisplayArea = form.querySelector(
      "#current-cover-image-display-area",
    );
    if (data.coverImage) {
      imageDisplayArea.innerHTML = `<p>Imagen actual:</p><img src="${data.coverImage}" alt="Portada actual" style="max-width: 150px; margin-top: 10px;" />`;
      form.querySelector("#clear-image-option").style.display = "block";
    }
  }

  // --- Lógica de envío del formulario ---
  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const user = auth.currentUser;
    if (!user) {
      alert("Debes iniciar sesión para realizar esta operación.");
      window.location.href = "/admin/login";
      return;
    }

    const idToken = await user.getIdToken();
    const formData = new FormData(form);

    const method = currentPostId ? "PUT" : "POST";
    // NOTA: Asegúrate que la ruta a tu API sea la correcta para "listings"
    const url = currentPostId
      ? `/api/listings/${currentPostId}`
      : "/api/listings";

    try {
      const response = await fetch(url, {
        method: method,
        body: formData,
        headers: { Authorization: `Bearer ${idToken}` },
      });
      const result = await response.json();
      if (response.ok) {
        alert("Operación exitosa!");
        window.location.href = "/admin/listings"; // Redirigir a la lista de listings
      } else {
        alert("Error en la operación: " + result.error);
      }
    } catch (error) {
      alert("Error de red o desconocido: " + error.message);
    }
  });

  // --- Verificación de autenticación al cargar la página ---
  onAuthStateChanged(auth, (user) => {
    if (user) {
      // Si estamos en modo edición, cargar los datos
      if (currentPostId) {
        user.getIdToken().then((idToken) => {
          loadPostDataForEdit(currentPostId, idToken);
        });
      } else {
        // Si estamos creando, simplemente asignamos la fecha actual por defecto
        form.querySelector('[name="pubDate"]').value = new Date()
          .toISOString()
          .split("T")[0];
      }
    } else {
      // Si no hay sesión, redirigir al login
      alert("No autenticado. Por favor, inicia sesión.");
      window.location.href = "/admin/login";
    }
  });
</script>

<style>
  form {
    max-width: 800px;
    margin: 20px auto;
    padding: 30px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }
  h2 {
    text-align: center;
    margin-bottom: 25px;
  }
  label {
    display: block;
    margin-bottom: 15px;
    font-weight: bold;
    color: #555;
  }
  input[type="text"],
  input[type="date"],
  textarea {
    width: calc(100% - 22px);
    padding: 10px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 16px;
    box-sizing: border-box; /* Incluye padding y border en el width */
  }
  input[type="file"] {
    margin-top: 5px;
  }
  input[type="checkbox"] {
    margin-right: 10px;
  }
  button[type="submit"] {
    display: block;
    width: 100%;
    padding: 12px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    font-size: 18px;
    cursor: pointer;
    margin-top: 25px;
  }
  button[type="submit"]:hover {
    background-color: #0056b3;
  }
  img {
    display: block;
    margin-top: 10px;
    border: 1px solid #eee;
    border-radius: 4px;
  }
</style>
