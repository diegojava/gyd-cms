---
// src/pages/admin/posts/index.astro
import Nav from "../../components/utils/Nav.astro";
import "/src/styles/global.css";

// 1. Preparamos la configuración de Firebase en el servidor
const clientSideFirebaseConfig = {
  apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
  authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
  appId: import.meta.env.PUBLIC_FIREBASE_APP_ID,
};
---

<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Gestionar Posts</title>
    <style>
      /* Tus estilos pueden quedar como están */
      body {
        font-family: sans-serif;
      }
    </style>
  </head>
  <body>
    <Nav currentPage="posts" />
    <section class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <h2
        class="text-3xl font-extrabold text-gray-900 dark:text-white mb-6 mt-8"
      >
        Gestionar Posts del Blog
      </h2>
      <a href="/admin/posts/new" class="inline-block mb-8">
        <button
          type="button"
          class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
        >
          Crear Post
        </button>
      </a>

      <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
        <table
          class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400"
        >
          <thead
            class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"
          >
            <tr>
              <th scope="col" class="px-6 py-3">
                <span class="sr-only">Imagen</span>
              </th>
              <th scope="col" class="px-6 py-3"> Título (ES) </th>
              <th scope="col" class="px-6 py-3"> Borrador </th>
              <th scope="col" class="px-6 py-3"> Publicado </th>
              <th scope="col" class="px-6 py-3"> Acciones </th>
            </tr>
          </thead>
          <tbody id="posts-table-body">
            <tr>
              <td colspan="5" class="px-6 py-4 text-center"
                >Cargando posts...
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </section>

    <script
      type="module"
      define:vars={{ firebaseConfig: clientSideFirebaseConfig }}
    >
      // 3. Inicializamos Firebase aquí, en lugar de importar un archivo
      import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
      import {
        getAuth,
        onAuthStateChanged,
      } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";

      const app = initializeApp(firebaseConfig);
      const auth = getAuth(app); // La variable 'auth' ahora existe en este script

      // 4. El resto de tu código que ya tenías, ahora funcionará
      const postsTableBody = document.getElementById("posts-table-body");

      async function fetchAndRenderPosts() {
        postsTableBody.innerHTML = `<tr><td colspan="5" class="px-6 py-4 text-center">Cargando posts...</td></tr>`;
        const user = auth.currentUser;

        if (!user) {
          postsTableBody.innerHTML = `<tr><td colspan="5" class="px-6 py-4 text-center">Debes iniciar sesión para ver los posts.</td></tr>`;
          // Opcional: redirigir
          // window.location.href = '/admin/login';
          return;
        }
        const idToken = await user.getIdToken();

        try {
          const response = await fetch("/api/blog", {
            headers: { Authorization: `Bearer ${idToken}` },
          });
          const posts = await response.json();

          if (!response.ok) {
            postsTableBody.innerHTML = `<tr><td colspan="5" class="px-6 py-4 text-center">Error al cargar posts: ${posts.error}</td></tr>`;
            return;
          }

          if (posts.length === 0) {
            postsTableBody.innerHTML = `<tr><td colspan="5" class="px-6 py-4 text-center">No hay posts creados.</td></tr>`;
            return;
          }

          postsTableBody.innerHTML = ""; // Limpiar
          posts.forEach((post) => {
            const rowElement = document.createElement("tr");
            rowElement.className =
              "bg-white border-b dark:bg-gray-800 dark:border-gray-700 border-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600";

            // Corrección para la fecha: los Timestamps de Firestore vienen como objetos
            const pubDate =
              post.pubDate && post.pubDate.seconds
                ? new Date(post.pubDate.seconds * 1000)
                : new Date(); // Fecha por defecto si no existe

            rowElement.innerHTML = `
                <td class="p-4">
                    ${post.coverImage ? `<img src="${post.coverImage}" alt="Portada" class="w-16 h-16 object-cover rounded-md" />` : `<div class="w-16 h-16 bg-gray-200 dark:bg-gray-700 rounded-md flex items-center justify-center text-gray-500">No img</div>`}
                </td>
                <td class="px-6 py-4 font-semibold text-gray-900 dark:text-white">
                    ${post.translations.es.title || "Sin Título"}
                    <div class="text-sm font-normal text-gray-500">${post.id}</div>
                </td>
                <td class="px-6 py-4">
                    ${post.draft ? '<span class="bg-yellow-100 text-yellow-800 text-xs font-medium me-2 px-2.5 py-0.5 rounded dark:bg-yellow-900 dark:text-yellow-300">Borrador</span>' : '<span class="bg-green-100 text-green-800 text-xs font-medium me-2 px-2.5 py-0.5 rounded dark:bg-green-900 dark:text-green-300">Publicado</span>'}
                </td>
                <td class="px-6 py-4">
                    ${pubDate.toLocaleDateString("es-ES", { year: "numeric", month: "long", day: "numeric" })}
                </td>
                <td class="px-6 py-4">
                    <a href="/admin/posts/edit/${post.id}" class="font-medium text-blue-600 dark:text-blue-500 hover:underline me-3">Editar</a>
                    <a href="#" data-id="${post.id}" class="delete-btn font-medium text-red-600 dark:text-red-500 hover:underline">Borrar</a>
                </td>
            `;
            postsTableBody.appendChild(rowElement);
          });

          document.querySelectorAll(".delete-btn").forEach((button) => {
            button.addEventListener("click", async (e) => {
              e.preventDefault();
              const postId = e.target.dataset.id;
              if (
                window.confirm(
                  `¿Estás seguro de que quieres borrar el post "${postId}"?`,
                )
              ) {
                try {
                  const deleteResponse = await fetch(`/api/blog/${postId}`, {
                    method: "DELETE",
                    headers: { Authorization: `Bearer ${idToken}` },
                  });
                  if (deleteResponse.ok) {
                    alert("Post borrado exitosamente!");
                    fetchAndRenderPosts(); // Recargar la lista
                  } else {
                    const deleteResult = await deleteResponse.json();
                    alert(`Error al borrar post: ${deleteResult.error}`);
                  }
                } catch (error) {
                  alert("Error de red al borrar el post.");
                }
              }
            });
          });
        } catch (error) {
          console.error("Error al obtener posts:", error);
          postsTableBody.innerHTML = `<tr><td colspan="5" class="px-6 py-4 text-center">Error al cargar los posts.</td></tr>`;
        }
      }

      onAuthStateChanged(auth, (user) => {
        if (user) {
          fetchAndRenderPosts();
        } else {
          postsTableBody.innerHTML = `<tr><td colspan="5" class="px-6 py-4 text-center">Inicia sesión para ver y gestionar posts.</td></tr>`;
          window.location.href = "/admin/login"; // Redirigir si no hay sesión
        }
      });
    </script>
  </body>
</html>
